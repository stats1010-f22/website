{
  "hash": "7af11b5904e2fcff77d52332a1c5c257",
  "result": {
    "markdown": "---\ntitle: \"Lec 5 - Introduction to probability\"\nsubtitle: \"STAT 1010 - Fall 2022\"\nfooter:  \"[stat1010-f22.github.io/website](https://stats1010-f22.github.io/website/)\"\nformat: \n  revealjs: \n    theme: slides.scss\n    transition: fade\n    slide-number: true\neditor: visual\nexecute:\n  freeze: auto\n---\n\n\n\n\n# Learning outcomes\n\nBy the end of this lesson you should:\n\n-   Understand probability and its axioms\n\n-   Know and understand words like union, intersection, and compliment\n\n-   Be able to calculate basic probabilities\n\n# History of probability\n\n-   Gives you an edge in games of chance\n-   Cardano, Fermat, Pascal, Kolmogorov\n-   casinos rely on probability theory for profits\n\n# Word cloud of probability\n\nUse this [link](PollEv.com/gwynnsturdevant155), or the qr code below\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](lect_05_files/figure-revealjs/unnamed-chunk-2-1.png){width=960}\n:::\n:::\n\n\n# Basic terminology\n\n-   An *experiment* is a process that produces an *observation*.\n-   An *outcome* is a possible observation.\n-   The set of all possible outcomes is called the *sample space*.\n-   An *event* is a subset of the sample space.\n-   A *trial* is a single running of an experiment.\n-   Events are *disjoint* or *mutually exclusiv*e if they have no outcomes in common.\n\n# An *experiment*\n\nRoll a fair, 6-sided and observe the number of pips that appear on top.\n\n1.  What is one *outcome* of a *trial*?\n2.  What is the *sample space*?\n3.  What are possible *events*?\n4.  What are some *disjoint* events?\n5.  What are the *probabilities* of the events above?\n\n# 5 mins\n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"countdown\" id=\"timer_6327721b\" style=\"right:0;bottom:0;position: relative; width: min-content;\" data-warnwhen=\"0\">\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n:::\n:::\n\n\n# The 3 axioms of probability\n\n1.  The probability of the *sample space* ($S$) is 1 (ie $P(S) = 1$)\n2.  A probability $p$ is always between $0$ and $1$ (ie $0 \\leq p \\leq 1$)\n3.  If two events $A$ and $B$ are *disjoint*, then $P(A \\cup B) = P(A) + P(B)$\n\n#  {background-image=\"lect_05-images/one_event.png\" background-size=\"contain\"}\n\n# Your turn\n\n[Click here](https://stats1010-f22.github.io/website/ae/ae-4.html) or the qr code below to write your first line of code\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](lect_05_files/figure-revealjs/unnamed-chunk-4-1.png){width=960}\n:::\n:::\n",
    "supporting": [
      "lect_05_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/countdown-0.3.5/countdown.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/countdown-0.3.5/countdown.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    function fireSlideChanged(previousSlide, currentSlide) {\n\n      // dispatch for htmlwidgets\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for reveal\n    if (window.Reveal) {\n      window.Reveal.addEventListener(\"slidechanged\", function(event) {\n        fireSlideChanged(event.previousSlide, event.currentSlide);\n      });\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}