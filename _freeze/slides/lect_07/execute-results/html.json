{
  "hash": "1d1263abc0c2df2c6a4c8be0bb7bced5",
  "result": {
    "markdown": "---\ntitle: \"Chapter 9: Random variables\"\nsubtitle: \"STAT 1010 - Fall 2022\"\nfooter:  \"[stat1010-f22.github.io/website](https://stats1010-f22.github.io/website/)\"\nformat: \n  revealjs: \n    theme: slides.scss\n    transition: fade\n    slide-number: true\neditor: visual\nexecute:\n  freeze: auto\n---\n\n\n\n\n# Learning outcomes\n\nBy the end of this lesson you should:\n\n-   Know how to find the mean given a probability mass function\n\n-   Understand how to use expected values and variance rules to calculate\n\n# Revision - 1\n\nFind the mean, and variance for these examples:\n\n1.  20, 24, 25, 36, 25, 22, 23\n\n2.  Rolling a fair six-sided die\n\n# Revision - 2\n\nA stock with these prices at this frequency\n\n| Value | n   |\n|-------|-----|\n| 1.23  | 3   |\n| 1.29  | 5   |\n| 1.37  | 4   |\n| 1.84  | 1   |\n| 1.18  | 6   |\n| 1.22  | 2   |\n| 1.25  | 4   |\n\n# Probability density function\n\nThere are different ways to define a pdf:\n\n-   table\n\n-   plot\n\n# pdf\n\n::: columns\n::: {.column width=\"40%\"}\n\n::: {.cell .column-page-left}\n::: {.cell-output-display}\n![](lect_07_files/figure-revealjs/pdf-run-1.png){width=960}\n:::\n:::\n\n:::\n\n::: {.column width=\"60%\"}\n\n::: {.cell .column-page-right}\n\n```{.r .cell-code}\nvalues <- c(1.23, 1.29, 1.37, 1.84, 1.18, 1.22, 1.25)\ncounts <- c(3, 5, 4, 1, 6, 2, 4)\n\nd <- \n  as_tibble(data.frame(values, counts)) %>% \n  mutate(prop = counts/sum(counts)) %>% \n  rowwise() %>% \n  mutate(part_mean = sum(values*prop)) %>% \n  ungroup() %>% \n  mutate(mean = sum (part_mean))\n\nd %>% \n  ggplot(aes(x = values, y = prop)) +\n  geom_bar(stat = \"identity\") +\n  vline()\n```\n:::\n\n:::\n:::\n\n# Parameter vs estimate\n\n+------------------+-----------------------------+------------------+\n|                  | population                  | sample           |\n+==================+=============================+==================+\n| name             | parameter                   | estimate         |\n+------------------+-----------------------------+------------------+\n| mean             | $\\mu$                       | $\\bar{x}$        |\n+------------------+-----------------------------+------------------+\n| variance         | $\\sigma^2$                  | $s^2$            |\n+------------------+-----------------------------+------------------+\n| standard         | $\\sigma$                    | $s$              |\n|                  |                             |                  |\n| deviation        |                             |                  |\n+------------------+-----------------------------+------------------+\n| size             | $N$                         | $n$              |\n+------------------+-----------------------------+------------------+\n\n# Visually\n\n![](lect_07-images/parameter_estimate.png)\n\n# Your turn\n\n[Click here](https://stats1010-f22.github.io/website/ae/ae-8.html) or the qr code below\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](lect_07_files/figure-revealjs/unnamed-chunk-2-1.png){width=960}\n:::\n:::\n",
    "supporting": [
      "lect_07_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    function fireSlideChanged(previousSlide, currentSlide) {\n\n      // dispatch for htmlwidgets\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for reveal\n    if (window.Reveal) {\n      window.Reveal.addEventListener(\"slidechanged\", function(event) {\n        fireSlideChanged(event.previousSlide, event.currentSlide);\n      });\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}